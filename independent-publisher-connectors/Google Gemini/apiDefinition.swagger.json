{
  "swagger": "2.0",
  "info": {
    "title": "Google Gemini",
    "description": "Custom connector for Google Gemini, providing advanced AI text generation functionalities.",
    "version": "1.0",
    "contact": {
      "name": "Priyaranjan KS, Vidya Sagar Alti",
      "url": "https://www.tcs.com",
      "email": "priyaranjan.sathyavrathan@tcs.com"
    }
  },
  "x-ms-connector-metadata": [
    {
      "propertyName": "Website",
      "propertyValue": "https://ai.google.dev/"
    },
    {
      "propertyName": "Privacy policy",
      "propertyValue": "https://policies.google.com/privacy"
    },
    {
      "propertyName": "Categories",
      "propertyValue": "AI"
    }
  ],
  "host": "generativelanguage.googleapis.com",
  "basePath": "/",
  "schemes": [
    "https"
  ],
  "produces": [
    "application/json"
  ],
  "consumes": [
    "application/json"
  ],
  "securityDefinitions": {
    "API Key": {
      "type": "apiKey",
      "in": "query",
      "name": "key"
    }
  },
  "security": [
    {
      "API Key": []
    }
  ],
  "paths": {
    "/{apiVersion}/models/{modelName}:generateContent": {
      "post": {
        "summary": "Generate text content",
        "description": "Generates a text response from the model given an input message.",
        "operationId": "GenerateTextContent",
        "parameters": [
          {
            "in": "path",
            "name": "apiVersion",
            "x-ms-summary": "API Version",
            "x-ms-url-encoding": "single",
            "required": true,
            "type": "string",
            "default": "v1beta",
            "description": "API version to use for the endpoint. Eg- v1beta"
          },
          {
            "in": "path",
            "name": "modelName",
            "x-ms-summary": "Model Name",
            "x-ms-url-encoding": "single",
            "required": true,
            "type": "string",
            "default": "gemini-pro",
            "description": "Name of the model to be used for text generation. Eg - gemini-pro"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "contents": {
                  "type": "array",
                  "description": "Contents for generating the text response.",
                  "items": {
                    "type": "object",
                    "required": [
                      "parts"
                    ],
                    "properties": {
                      "role": {
                        "type": "string",
                        "default": "user",
                        "description": "Optional. The producer of the content. Must be either 'user' or 'model'\n"
                      },
                      "parts": {
                        "type": "array",
                        "description": "Parts of the content for text generation.",
                        "items": {
                          "type": "object",
                          "required": [
                            "text"
                          ],
                          "properties": {
                            "text": {
                              "type": "string",
                              "description": "Required.Text for generating the response."
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "safetySettings": {
                  "type": "array",
                  "description": "Optional.Safety settings for text content generation.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "category": {
                        "type": "string",
                        "description": "Optional.The category of content to be filtered."
                      },
                      "threshold": {
                        "type": "string",
                        "description": "Optional.The threshold for filtering content in the specified category."
                      }
                    }
                  }
                },
                "generationConfig": {
                  "type": "object",
                  "properties": {
                    "maxOutputTokens": {
                      "type": "integer",
                      "description": "Optional.The maximum number of tokens to include in a text candidate."
                    },
                    "temperature": {
                      "type": "number",
                      "description": "Optional.Controls the randomness of the text output."
                    },
                    "topP": {
                      "type": "number",
                      "description": "Optional.The maximum cumulative probability of tokens to consider when sampling."
                    },
                    "topK": {
                      "type": "integer",
                      "description": "Optional.The maximum number of tokens to consider when sampling."
                    },
                    "stopSequences": {
                      "type": "array",
                      "description": "Optional.The set of character sequences that will stop text output generation.",
                      "items": {
                        "type": "string",
                        "description": "Optional.The set of character sequences that will stop text output generation."
                      }
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful text response",
            "schema": {
              "type": "object",
              "properties": {
                "candidates": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "content": {
                        "type": "object",
                        "properties": {
                          "parts": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "text": {
                                  "type": "string"
                                }
                              }
                            }
                          }
                        }
                      },
                      "finishReason": {
                        "type": "string"
                      },
                      "index": {
                        "type": "integer"
                      },
                      "safetyRatings": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "category": {
                              "type": "string"
                            },
                            "probability": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "promptFeedback": {
                  "type": "object",
                  "properties": {
                    "safetyRatings": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "category": {
                            "type": "string"
                          },
                          "probability": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/{apiVersion}/models/{modelName}-vision:generateContent": {
      "post": {
        "summary": "Generate multi modal content",
        "description": "Generates a response from the model given an input message and an image or video.",
        "operationId": "GenerateMultiModalContent",
        "parameters": [
          {
            "in": "path",
            "name": "apiVersion",
            "x-ms-summary": "API Version",
            "x-ms-url-encoding": "single",
            "required": true,
            "type": "string",
            "default": "v1beta",
            "description": "API version to use for the vision endpoint.Eg- v1beta"
          },
          {
            "in": "path",
            "name": "modelName",
            "x-ms-summary": "Base Model Name",
            "x-ms-url-encoding": "single",
            "required": true,
            "type": "string",
            "default": "gemini-pro",
            "description": "Name of the base model.Eg- Enter gemini-pro and corresponding vision model (gemini-pro-vision) will be used"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "contents": {
                  "type": "array",
                  "description": "Contents for generating the vision response.",
                  "items": {
                    "type": "object",
                    "required": [
                      "parts"
                    ],
                    "properties": {
                      "role": {
                        "type": "string",
                        "default": "user",
                        "description": "Optional. The producer of the content. Must be either 'user' or 'model'\n"
                      },
                      "parts": {
                        "type": "array",
                        "description": "The 'parts' array must contain two objects. The first object must be a 'text' object with  a prompt string value. The second object must be an 'inlineData' object containing 'mimeType' and 'base64-encoded data'. Example format for the 'parts' array: [\n  { \"text\": \"What is this picture?\" },\n  { \"inlineData\": { \"mimeType\": \"image/jpeg\", \"data\": \"base64-encoded-string\" } }\n] \n",
                        "items": {
                          "type": "object"
                        }
                      }
                    }
                  }
                },
                "safetySettings": {
                  "type": "array",
                  "description": "Optional.Safety settings for vision content generation.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "category": {
                        "type": "string",
                        "description": "Optional.The category of content to be filtered."
                      },
                      "threshold": {
                        "type": "string",
                        "description": "Optional.The threshold for filtering content in the specified category."
                      }
                    }
                  }
                },
                "generationConfig": {
                  "type": "object",
                  "properties": {
                    "maxOutputTokens": {
                      "type": "integer",
                      "description": "Optional.The maximum number of tokens to include in a vision candidate."
                    },
                    "temperature": {
                      "type": "number",
                      "description": "Optional.Controls the randomness of the vision output."
                    },
                    "topP": {
                      "type": "number",
                      "description": "Optional.The maximum cumulative probability of tokens to consider when sampling."
                    },
                    "topK": {
                      "type": "integer",
                      "description": "Optional.The maximum number of tokens to consider when sampling."
                    },
                    "stopSequences": {
                      "type": "array",
                      "description": "Optional.The set of character sequences that will stop text output generation.",
                      "items": {
                        "type": "string",
                        "description": "Optional.The set of character sequences that will stop text output generation."
                      }
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful vision response",
            "schema": {
              "type": "object",
              "properties": {
                "candidates": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "content": {
                        "type": "object",
                        "properties": {
                          "parts": {
                            "type": "array",
                            "items": {
                              "type": "object"
                            }
                          }
                        }
                      },
                      "finishReason": {
                        "type": "string"
                      },
                      "index": {
                        "type": "integer"
                      },
                      "safetyRatings": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "category": {
                              "type": "string"
                            },
                            "probability": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "promptFeedback": {
                  "type": "object",
                  "properties": {
                    "safetyRatings": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "category": {
                            "type": "string"
                          },
                          "probability": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}