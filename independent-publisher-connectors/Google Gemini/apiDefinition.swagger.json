{
  "swagger": "2.0",
  "info": {
    "title": "Google Gemini",
    "description": "Custom connector for Google Gemini, providing advanced AI text generation functionalities.",
    "version": "1.0",
    "contact": {
      "name": "Priyaranjan KS, Vidya Sagar Alti",
      "url": "https://www.tcs.com",
      "email": "priyaranjan.sathyavrathan@tcs.com"
    }
  },
  "x-ms-connector-metadata": [
    {
      "propertyName": "Website",
      "propertyValue": "https://ai.google.dev/"
    },
    {
      "propertyName": "Privacy policy",
      "propertyValue": "https://policies.google.com/privacy"
    },
    {
      "propertyName": "Categories",
      "propertyValue": "AI"
    }
  ],
  "host": "generativelanguage.googleapis.com",
  "basePath": "/",
  "schemes": [
    "https"
  ],
  "produces": [
    "application/json"
  ],
  "consumes": [
    "application/json"
  ],
  "securityDefinitions": {
    "API Key": {
      "type": "apiKey",
      "in": "query",
      "name": "key"
    }
  },
  "security": [
    {
      "API Key": []
    }
  ],
  "paths": {
    "/{apiVersion}/models/{modelName}:generateContent": {
      "post": {
        "summary": "Generate text content",
        "description": "Generates a text response from the model given an input message.",
        "operationId": "GenerateTextContent",
        "parameters": [
          {
            "in": "path",
            "name": "apiVersion",
            "x-ms-summary": "API Version",
            "x-ms-url-encoding": "single",
            "required": true,
            "type": "string",
            "default": "v1beta",
            "description": "API version to use for the endpoint. Eg- v1beta"
          },
          {
            "in": "path",
            "name": "modelName",
            "x-ms-summary": "Model Name",
            "x-ms-url-encoding": "single",
            "required": true,
            "type": "string",
            "default": "gemini-pro",
            "description": "Name of the model to be used for text generation. Eg - gemini-pro"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "contents": {
                  "type": "array",
                  "description": "Contents for generating the text response.",
                  "items": {
                    "type": "object",
                    "required": [
                      "parts"
                    ],
                    "properties": {
                      "role": {
                        "type": "string",
                        "default": "user",
                        "description": "Optional. The producer of the content. Must be either 'user' or 'model'\n"
                      },
                      "parts": {
                        "type": "array",
                        "description": "Parts of the content for text generation.",
                        "items": {
                          "type": "object",
                          "required": [
                            "text"
                          ],
                          "properties": {
                            "text": {
                              "type": "string",
                              "description": "Required.Text for generating the response."
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "safetySettings": {
                  "type": "array",
                  "description": "Optional.Safety settings for text content generation.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "category": {
                        "type": "string",
                        "description": "Optional.The category of content to be filtered."
                      },
                      "threshold": {
                        "type": "string",
                        "description": "Optional.The threshold for filtering content in the specified category."
                      }
                    }
                  }
                },
                "generationConfig": {
                  "type": "object",
                  "properties": {
                    "maxOutputTokens": {
                      "type": "integer",
                      "description": "Optional.The maximum number of tokens to include in a text candidate."
                    },
                    "temperature": {
                      "type": "number",
                      "description": "Optional.Controls the randomness of the text output."
                    },
                    "topP": {
                      "type": "number",
                      "description": "Optional.The maximum cumulative probability of tokens to consider when sampling."
                    },
                    "topK": {
                      "type": "integer",
                      "description": "Optional.The maximum number of tokens to consider when sampling."
                    },
                    "stopSequences": {
                      "type": "array",
                      "description": "Optional.The set of character sequences that will stop text output generation.",
                      "items": {
                        "type": "string",
                        "description": "Optional.The set of character sequences that will stop text output generation."
                      }
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful text response",
            "schema": {
              "type": "object",
              "properties": {
                "candidates": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "content": {
                        "type": "object",
                        "properties": {
                          "parts": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "text": {
                                  "type": "string"
                                }
                              }
                            }
                          }
                        }
                      },
                      "finishReason": {
                        "type": "string"
                      },
                      "index": {
                        "type": "integer"
                      },
                      "safetyRatings": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "category": {
                              "type": "string"
                            },
                            "probability": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "promptFeedback": {
                  "type": "object",
                  "properties": {
                    "safetyRatings": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "category": {
                            "type": "string"
                          },
                          "probability": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/{apiVersion}/models/{modelName}:streamGenerateContent": {
      "post": {
        "summary": "Generate stream content",
        "description": "By default, the model returns a response after completing the entire generation process. You can achieve faster interactions by not waiting for the entire result, and instead use streaming to handle partial results.",
        "operationId": "generateStreamContent",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "apiVersion",
            "in": "path",
            "required": true,
            "type": "string",
            "default": "v1beta",
            "description": "API version, e.g., 'v1beta'.",
            "x-ms-summary": "API Version",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "modelName",
            "in": "path",
            "required": true,
            "type": "string",
            "default": "gemini-pro",
            "description": "Model name, e.g., 'gemini-pro'.",
            "x-ms-summary": "Model Name",
            "x-ms-url-encoding": "single"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The request payload containing the content generation parameters. 'text' is required; all other parameters are optional.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "contents": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "description": "Optional. The content to be processed by the model. Includes the required \"text\" parameter.",
                    "properties": {
                      "role": {
                        "type": "string",
                        "default": "user",
                        "description": "Optional. Role of the content, typically \"user\"."
                      },
                      "parts": {
                        "type": "array",
                        "description": "Required. Parts of the content, including the text to be processed.",
                        "items": {
                          "type": "object",
                          "properties": {
                            "text": {
                              "type": "string",
                              "description": "Required. Text content to be processed."
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "safetySettings": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "description": "Optional. Safety settings to filter content based on certain categories.",
                    "properties": {
                      "category": {
                        "type": "string",
                        "description": "Optional. Category of content to be filtered."
                      },
                      "threshold": {
                        "type": "string",
                        "description": "Optional. Threshold level for content filtering."
                      }
                    }
                  }
                },
                "generationConfig": {
                  "type": "object",
                  "description": "Optional. Configuration settings for content generation.",
                  "properties": {
                    "temperature": {
                      "type": "number",
                      "description": "Optional. Controls randomness in the response. Higher values lead to more varied responses."
                    },
                    "maxOutputTokens": {
                      "type": "integer",
                      "description": "Optional. Maximum number of tokens in the generated content."
                    },
                    "topP": {
                      "type": "number",
                      "description": "Optional. Controls diversity of the response. Higher values lead to more diverse responses."
                    },
                    "topK": {
                      "type": "integer",
                      "description": "Optional. Limits the number of high-probability tokens considered at each step."
                    },
                    "candidateCount": {
                      "type": "integer",
                      "description": "Optional. Number of candidate responses to generate."
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response with generated content.",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "candidates": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "content": {
                          "type": "object",
                          "properties": {
                            "parts": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "text": {
                                    "type": "string"
                                  }
                                }
                              }
                            },
                            "role": {
                              "type": "string"
                            }
                          }
                        },
                        "finishReason": {
                          "type": "string"
                        },
                        "index": {
                          "type": "integer"
                        },
                        "safetyRatings": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "category": {
                                "type": "string"
                              },
                              "probability": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "promptFeedback": {
                    "type": "object",
                    "properties": {
                      "safetyRatings": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "category": {
                              "type": "string"
                            },
                            "probability": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/{apiVersion}/models/{modelName}-vision:generateContent": {
      "post": {
        "summary": "Generate multi modal content",
        "description": "Generates a response from the model given an input message and an image or video.",
        "operationId": "GenerateMultiModalContent",
        "parameters": [
          {
            "in": "path",
            "name": "apiVersion",
            "x-ms-summary": "API Version",
            "x-ms-url-encoding": "single",
            "required": true,
            "type": "string",
            "default": "v1beta",
            "description": "API version to use for the vision endpoint.Eg- v1beta"
          },
          {
            "in": "path",
            "name": "modelName",
            "x-ms-summary": "Base Model Name",
            "x-ms-url-encoding": "single",
            "required": true,
            "type": "string",
            "default": "gemini-pro",
            "description": "Name of the base model.Eg- Enter gemini-pro and corresponding vision model (gemini-pro-vision) will be used"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "contents": {
                  "type": "array",
                  "description": "Contents for generating the vision response.",
                  "items": {
                    "type": "object",
                    "required": [
                      "parts"
                    ],
                    "properties": {
                      "role": {
                        "type": "string",
                        "default": "user",
                        "description": "Optional. The producer of the content. Must be either 'user' or 'model'\n"
                      },
                      "parts": {
                        "type": "array",
                        "description": "The 'parts' array must contain two objects. The first object must be a 'text' object with  a prompt string value. The second object must be an 'inlineData' object containing 'mimeType' and 'base64-encoded data'. Example format for the 'parts' array: [\n  { \"text\": \"What is this picture?\" },\n  { \"inlineData\": { \"mimeType\": \"image/jpeg\", \"data\": \"base64-encoded-string\" } }\n] \n",
                        "items": {
                          "type": "object"
                        }
                      }
                    }
                  }
                },
                "safetySettings": {
                  "type": "array",
                  "description": "Optional.Safety settings for vision content generation.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "category": {
                        "type": "string",
                        "description": "Optional.The category of content to be filtered."
                      },
                      "threshold": {
                        "type": "string",
                        "description": "Optional.The threshold for filtering content in the specified category."
                      }
                    }
                  }
                },
                "generationConfig": {
                  "type": "object",
                  "properties": {
                    "maxOutputTokens": {
                      "type": "integer",
                      "description": "Optional.The maximum number of tokens to include in a vision candidate."
                    },
                    "temperature": {
                      "type": "number",
                      "description": "Optional.Controls the randomness of the vision output."
                    },
                    "topP": {
                      "type": "number",
                      "description": "Optional.The maximum cumulative probability of tokens to consider when sampling."
                    },
                    "topK": {
                      "type": "integer",
                      "description": "Optional.The maximum number of tokens to consider when sampling."
                    },
                    "stopSequences": {
                      "type": "array",
                      "description": "Optional.The set of character sequences that will stop text output generation.",
                      "items": {
                        "type": "string",
                        "description": "Optional.The set of character sequences that will stop text output generation."
                      }
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful vision response",
            "schema": {
              "type": "object",
              "properties": {
                "candidates": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "content": {
                        "type": "object",
                        "properties": {
                          "parts": {
                            "type": "array",
                            "items": {
                              "type": "object"
                            }
                          }
                        }
                      },
                      "finishReason": {
                        "type": "string"
                      },
                      "index": {
                        "type": "integer"
                      },
                      "safetyRatings": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "category": {
                              "type": "string"
                            },
                            "probability": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "promptFeedback": {
                  "type": "object",
                  "properties": {
                    "safetyRatings": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "category": {
                            "type": "string"
                          },
                          "probability": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/{apiVersion}/models/{modelName}:countTokens": {
      "post": {
        "summary": "Count tokens",
        "description": "Counts the number of tokens in a given text using the Generative Language Model.",
        "operationId": "countTokens",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "apiVersion",
            "in": "path",
            "x-ms-summary": "API Version",
            "x-ms-url-encoding": "single",
            "required": true,
            "type": "string",
            "default": "v1beta",
            "description": "API version to use for the vision endpoint.Eg- v1beta"
          },
          {
            "name": "modelName",
            "in": "path",
            "required": true,
            "type": "string",
            "default": "gemini-pro",
            "description": "Model name, e.g., 'gemini-pro'.",
            "x-ms-summary": "Model Name",
            "x-ms-url-encoding": "single"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The request payload containing the text for which tokens are to be counted. The 'text' parameter is required.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "contents": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "description": "Required. The content for which token count is to be determined.",
                    "properties": {
                      "parts": {
                        "type": "array",
                        "description": "Required. Parts of the content, including the text for token counting.",
                        "items": {
                          "type": "object",
                          "properties": {
                            "text": {
                              "type": "string",
                              "description": "Required. Text content for which the token count is to be determined."
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response with token count.",
            "schema": {
              "type": "object",
              "properties": {
                "totalTokens": {
                  "type": "integer",
                  "description": "The total number of tokens in the provided text."
                }
              }
            }
          }
        }
      }
    },
    "/{apiVersion}/models": {
      "get": {
        "summary": "Get all models",
        "description": "Retrieves a list of all available models with their details.",
        "operationId": "getAllModels",
        "parameters": [
          {
            "name": "apiVersion",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "API version, e.g., 'v1beta'.",
            "default": "v1beta",
            "x-ms-summary": "API Version",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of models with their details.",
            "schema": {
              "type": "object",
              "properties": {
                "models": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "Unique identifier of the model."
                      },
                      "version": {
                        "type": "string",
                        "description": "Version of the model."
                      },
                      "displayName": {
                        "type": "string",
                        "description": "Display name of the model."
                      },
                      "description": {
                        "type": "string",
                        "description": "Description of the model."
                      },
                      "inputTokenLimit": {
                        "type": "integer",
                        "description": "The maximum number of input tokens the model can handle."
                      },
                      "outputTokenLimit": {
                        "type": "integer",
                        "description": "The maximum number of output tokens the model can generate."
                      },
                      "supportedGenerationMethods": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "List of supported generation methods by the model."
                      },
                      "temperature": {
                        "type": "number",
                        "description": "Default temperature setting for the model. Not present for all models."
                      },
                      "topP": {
                        "type": "number",
                        "description": "Default topP setting for the model. Not present for all models."
                      },
                      "topK": {
                        "type": "number",
                        "description": "Default topK setting for the model. Not present for all models."
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/{apiVersion}/models/{modelName}": {
      "get": {
        "summary": "Get model details",
        "description": "Retrieves details of a specific model based on the provided model name.",
        "operationId": "getModelDetails",
        "parameters": [
          {
            "name": "apiVersion",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "API version, e.g., 'v1beta'.",
            "default": "v1beta",
            "x-ms-summary": "API Version",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "modelName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Model name, e.g., 'gemini-pro'.",
            "default": "gemini-pro",
            "x-ms-summary": "Model Name",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed information of the specified model.",
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Unique identifier of the model."
                },
                "version": {
                  "type": "string",
                  "description": "Version of the model."
                },
                "displayName": {
                  "type": "string",
                  "description": "Display name of the model."
                },
                "description": {
                  "type": "string",
                  "description": "Description of the model."
                },
                "inputTokenLimit": {
                  "type": "integer",
                  "description": "The maximum number of input tokens the model can handle."
                },
                "outputTokenLimit": {
                  "type": "integer",
                  "description": "The maximum number of output tokens the model can generate."
                },
                "supportedGenerationMethods": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "List of supported generation methods by the model."
                },
                "temperature": {
                  "type": "number",
                  "description": "Default temperature setting for the model."
                },
                "topP": {
                  "type": "number",
                  "description": "Default topP setting for the model."
                },
                "topK": {
                  "type": "number",
                  "description": "Default topK setting for the model."
                }
              }
            }
          }
        }
      }
    }
  }
}